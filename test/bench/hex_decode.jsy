import {u8_to_hex} from '../../code/hex.jsy'
import {u8_random} from '../../code/random.jsy'


const suite = require('benchmark').Suite()

const barrage = @[]
  u8_to_hex @ u8_random(16)
  u8_to_hex @ u8_random(24)
  u8_to_hex @ u8_random(32)
  u8_to_hex @ u8_random(48)
  u8_to_hex @ u8_random(64)

suite.add @ 'Baseline', @::
  for const each of barrage ::
    hex_to_u8_baseline(each)

suite.add @ 'Noop', @::
  for const each of barrage ::
    hex_to_u8_noop(each)

suite.add @ 'lut 2 part', @::
  for const each of barrage ::
    hex_to_u8_lut(each)

suite.add @ 'lut 2 part opt', @::
  for const each of barrage ::
    hex_to_u8_lut_opt(each)

suite.add @ 'lut 1 part', @::
  for const each of barrage ::
    hex_to_u8_lut_one(each)

suite.add @ 'lut 1 part opt', @::
  for const each of barrage ::
    hex_to_u8_lut_one_opt(each)

if 0 ::
  suite.add @ 'lut 2 part map', @::
    for const each of barrage ::
      hex_to_u8_map(each)

  suite.add @ 'lut full join', @::
    for const each of barrage ::
      hex_to_u8_lut_full(each)

  suite.add @ 'lut full slice', @::
    for const each of barrage ::
      hex_to_u8_lut_full_slice(each)

  suite.add @ 'regexp', @::
    for const each of barrage ::
      hex_to_u8_rx(each)



function hex_to_u8_baseline(hex) ::
  hex = hex.replace(/[^0-9a-fA-F]/g, '')
  const u8 = new Uint8Array(hex.length >> 1)
  for let i=0, i2=0; i<u8.length; i++, i2+=2 ::
    u8[i] = parseInt @ hex.slice(i2, i2+2), 16
  return u8


function hex_to_u8_noop(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  return u8



const _lut_hex_low = @{}
  0: 0x0, 1: 0x1, 2: 0x2, 3: 0x3, 4: 0x4, 5: 0x5, 6: 0x6, 7: 0x7, 8: 0x8, 9: 0x9,
  a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
  A: 0xa, B: 0xb, C: 0xc, D: 0xd, E: 0xe, F: 0xf,

const _lut_hex_high = @{}
  0: 0x00, 1: 0x10, 2: 0x20, 3: 0x30, 4: 0x40, 5: 0x50, 6: 0x60, 7: 0x70, 8: 0x80, 9: 0x90,
  a: 0xa0, b: 0xb0, c: 0xc0, d: 0xd0, e: 0xe0, f: 0xf0,
  A: 0xa0, B: 0xb0, C: 0xc0, D: 0xd0, E: 0xe0, F: 0xf0,

function hex_to_u8_lut(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  for let i=0,j=0; i<len; i++, j+=2 ::
    u8[i] = _lut_hex_high[hex[j]] | _lut_hex_low[hex[j+1]]
  return u8

function hex_to_u8_lut_opt(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const hlen = hex.length, u8 = new Uint8Array(hlen>>1)
  for let i=0,j=0; j<hlen; ::
    u8[i++] = _lut_hex_high[hex[j++]] | _lut_hex_low[hex[j++]]
  return u8



function hex_to_u8_lut_one(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  for let i=0,j=0; i<len; i++, j+=2 ::
    u8[i] = _lut_hex_low[hex[j]] << 4
    u8[i] |= _lut_hex_low[hex[j+1]]
  return u8


function hex_to_u8_lut_one_opt(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1, u8 = new Uint8Array(len)
  // ~55% faster than parseInt
  for let i=0,j=0; i<len; j+=2 ::
    u8[i++] = (_lut_hex_low[hex[j]] << 4) | (_lut_hex_low[hex[j+1]])
  return u8


const _lut_hex_high_map = @!
  const m = new Map @ Object.entries @ _lut_hex_high
  return m.get.bind(m)

const _lut_hex_low_map = @!
  const m = new Map @ Object.entries @ _lut_hex_low
  return m.get.bind(m)

function hex_to_u8_map(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  for let i=0,j=0; i<len; i++, j+=2 ::
    u8[i] = _lut_hex_high_map(hex[j]) | _lut_hex_low_map(hex[j+1])
  return u8


const _lut_u8hex = Array.from @ Array(256),
  (_, v) => v.toString(16).padStart(2, '0')

const _lut_hex = _lut_u8hex.reduce @
  (r,v,i) => (r[v]=i, r), {}

function hex_to_u8_lut_full(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  for let i=0,j=0; i<len; i++, j+=2 ::
    u8[i] = _lut_hex[hex[j]+hex[j+1]]
  return u8

function hex_to_u8_lut_full_slice(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1
  const u8 = new Uint8Array(len)
  for let i=0,j=0; i<len; i++, j+=2 ::
    u8[i] = _lut_hex[hex.slice(j, j+2)]
  return u8



const _lut_hex_rx = _lut_u8hex.reduce @
  @\ lut, hex, i => @
    lut[hex] = String.fromCharCode(i)
    lut
  {}
const _lut_hex_rx_xform = sz => _lut_hex_rx[sz]
const _codePointAt = ''.codePointAt
const _rx_cu8 = sz => _codePointAt.call(sz, 0)

function hex_to_u8_rx(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  hex = hex.replace @ /../g, _lut_hex_rx_xform
  return Uint8Array.from @ hex, _rx_cu8


suite.on @ 'cycle', @\ event ::
  console.log @ `${event.target}`

suite.on @ 'complete', @::
  console.log @ 'Fastest is ' + suite.filter('fastest').map('name')

suite.run()

