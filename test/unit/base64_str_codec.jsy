import { describe, it, assert } from '#test/bdd'
import { utf8_to_u8, Base64Encoder, Base64Decoder } from 'u8-utils'
import {_readable_from_vec} from './_stream_utils.jsy'

import base64_test_tuples from './_base64_dataset.jsy'

describe @ `Base64Encoder and Base64Decoder`, @::
  const _as_u8 = v => v?.trim ? utf8_to_u8(v) : Uint8Array.from(v)
  const _async_flat = async aiter => 
    (await Array.fromAsync(aiter)).flatMap(e => [... e])

  const assert_vec_equal = (a, b) =>
    assert.deepEqual(Array.from(a), Array.from(b))

  for let [known_u8, known_b64, known_b64url] of base64_test_tuples ::
    known_u8 = _as_u8(known_u8)

    it @ `encode decode base64`, @::>
      let stream = _readable_from_vec([known_u8])
        .pipeThrough(new Base64Encoder(false))
        .pipeThrough(new Base64Decoder(false))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

    it @ `encode decode base64url`, @::>
      let stream = _readable_from_vec([known_u8])
        .pipeThrough(new Base64Encoder(true))
        .pipeThrough(new Base64Decoder(true))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

    it @ `encode base64`, @::>
      let stream = _readable_from_vec([known_u8])
        .pipeThrough(new Base64Encoder(false))

      let output_b64 = (await Array.fromAsync(stream)).join('')
      assert.strictEqual(output_b64, known_b64)

    it @ `encode base64url`, @::>
      let stream = _readable_from_vec([known_u8])
        .pipeThrough(new Base64Encoder(true))

      let output_b64url = (await Array.fromAsync(stream)).join('')
      assert.strictEqual(output_b64url, known_b64url)

    it @ `decode base64`, @::>
      let stream = _readable_from_vec([known_b64])
        .pipeThrough(new Base64Decoder(false))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

    it @ `decode base64url`, @::>
      let stream = _readable_from_vec([known_b64url])
        .pipeThrough(new Base64Decoder(true))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

    it @ `decode crossover b64 with b64url`, @::>
      let stream = _readable_from_vec([known_b64])
        .pipeThrough(new Base64Decoder(true))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

    it @ `decode crossover b64url with b64`, @::>
      let stream = _readable_from_vec([known_b64url])
        .pipeThrough(new Base64Decoder(false))

      let output_u8 = await _async_flat(stream)
      assert_vec_equal(output_u8, known_u8)

