export function _base64_u8_encoder(encode) ::
  let m = 0,c = 0
  return (chunk, done) => ::
    if ! done :: // when done is false or nullish
      let len = 0 | @ (4*chunk.byteLength + 2)/3
      var i=0, u8b64_out = new Uint8Array(len)

      let u8, v
      for (u8 of chunk) ::
        if 0 === m ::
          v = (u8 & 0xfc) >> 2
          c = u8 & 0x3
          u8b64_out[i++] = encode[v&63]
          m = 1

        else if 1 === m ::
          v = (c << 4) | ((u8 & 0xf0) >> 4)
          c = u8 & 0x0f
          u8b64_out[i++] = encode[v&63]
          m = 2

        else ::
          v = (c << 2) | ((u8 & 0xc0) >> 6)
          u8b64_out[i++] = encode[v&63]

          v = u8 & 0x3f
          u8b64_out[i++] = encode[v&63]
          m = c = 0


    if false !== done :: // when done is true or nullish
      if 0 === m :: return null

      let e = encode[1===m ? c << 4 : c << 2]
      let tail = encode.no_pad ? [e]
        : 2===m ? [e, 61]
        : [e, 61, 61]

      if ! u8b64_out ::
        return Uint8Array.from(tail)

      u8b64_out.set(tail, i)
      i += tail.length
      m = c = 0

    return u8b64_out.subarray(0,i)

