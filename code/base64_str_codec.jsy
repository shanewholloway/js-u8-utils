import {base64_str_encoder, base64_str_decoder} from './base64_str.jsy'


export class Base64Encoder extends TransformStream ::
  constructor(urlsafe_or_encode_lut, ...args) ::
    let _fn_encode = base64_str_encoder(urlsafe_or_encode_lut)
    super @:
      transform(chunk, controller) ::
        if 1 !== chunk.BYTES_PER_ELEMENT ::
          return controller.error(`Invalid U8 array: ${typeof chunk}`)

        let b64_out = _fn_encode(chunk, false)
        if null !== b64_out ::
          controller.enqueue(b64_out)

      flush(controller) ::
        let b64_out = _fn_encode(null, true)
        if null !== b64_out ::
          controller.enqueue(b64_out)

      ... args


export class Base64Decoder extends TransformStream ::
  constructor(urlsafe_or_decode_lut, ...args) ::
    let _fn_decode = base64_str_decoder(urlsafe_or_decode_lut)
    super @:
      transform(chunk, controller) ::
        if 'string' === typeof chunk ::
          chunk = new TextEncoder().encode(chunk)
        if 1 !== chunk.BYTES_PER_ELEMENT ::
          return controller.error(`Invalid U8 array: ${typeof chunk}`)

        try :: var u8_out = _fn_decode(chunk)
        catch err :: return controller.error(`${err}`)

        if null != u8_out ::
          controller.enqueue(u8_out)

      flush(controller) ::
        let u8_out = _fn_decode(null, true)
        if null !== u8_out ::
          controller.enqueue(u8_out)

      ... args

