const _lut_u8b2 = Array.from @ Array(256),
  (_, v) => v.toString(2).padStart(8, '0')

export function u8_to_base2(u8, sep) ::
  if undefined === u8.buffer ::
    u8 = new Uint8Array(u8)

  let s = ''
  sep = null==sep ? '' : ''+sep

  // 20x faster than Array.from/.map impl
  for const v of u8 ::
    s += _lut_u8b2[v & 0xff]
    s += sep

  return sep.length ? s.slice(0, -sep.length) : s


export function base2_to_u8(bits) ::
  bits = bits.replace(/[^01]/g, '')
  const u8 = new Uint8Array(bits.length >> 3)
  for let i=0, i2=0; i<u8.length; i++, i2+=8 ::
    u8[i] = parseInt @ bits.slice(i2, i2+8), 2
  return u8

