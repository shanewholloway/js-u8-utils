
export function as_u8_buffer(u8) ::
  if Uint8Array === u8.constructor ::
    return u8
  if u8.readInt8 || u8 instanceof ArrayBuffer ::
    return new Uint8Array(u8)
  if ArrayBuffer.isView(u8) ::
    return new Uint8Array(u8.buffer)
  return Uint8Array.from(u8)

export function u8_concat(parts) ::
  let i=0, len=0
  for const b of parts ::
    const byteLength = b.byteLength
    if 'number' !== typeof byteLength ::
      throw new Error @ "Invalid part byteLength"
    len += byteLength

  const u8 = new Uint8Array(len)
  for const u8_part of parts ::
    u8.set @ u8_part, i
    i += u8_part.byteLength
  return u8


