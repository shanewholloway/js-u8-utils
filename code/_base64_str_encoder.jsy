export function _base64_str_encoder(encode) ::
  if ! encode?.length ::
    encode = _init_b64lut(encode).sz.enc

  let m = 0,c = 0
  return (chunk, done) => ::
    let out = ''

    if ! done :: // when done is false or nullish
      let u8, v
      for (u8 of chunk) ::
        if 0 === m ::
          v = (u8 & 0xfc) >> 2
          c = u8 & 0x3
          out += encode[v&63]
          m = 1

        else if 1 === m ::
          v = (c << 4) | ((u8 & 0xf0) >> 4)
          c = u8 & 0x0f
          out += encode[v&63]
          m = 2

        else ::
          v = (c << 2) | ((u8 & 0xc0) >> 6)
          out += encode[v&63]

          v = u8 & 0x3f
          out += encode[v&63]
          m = c = 0

    if false !== done && 0 !== m :: // when done is true or nullish
      out += encode[1===m ? c << 4 : c << 2]
      if (!encode.no_pad)
        out += 2===m ? '=' : '=='
      m = c = 0

    return out ?? null


