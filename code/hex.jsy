const _lut_u8hex = Array.from @ Array(256),
  (_, v) => v.toString(16).padStart(2, '0')

export function u8_to_hex(u8, sep) ::
  if undefined === u8.buffer ::
    u8 = new Uint8Array(u8)
  
  let s = ''
  sep = null==sep ? '' : ''+sep

  // 20x faster than Array.from/.map impl
  for const v of u8 ::
    s += _lut_u8hex[v & 0xff]
    s += sep

  return sep.length ? s.slice(0, -sep.length) : s


const _lut_hexu8 = @{}
  0: 0x0, 1: 0x1, 2: 0x2, 3: 0x3, 4: 0x4, 5: 0x5, 6: 0x6, 7: 0x7, 8: 0x8, 9: 0x9,
  a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
  A: 0xa, B: 0xb, C: 0xc, D: 0xd, E: 0xe, F: 0xf,

export function hex_to_u8(hex) ::
  hex = hex.replace(/\W|_/g, '')
  if 2 & hex.length ::
    hex = '0'+hex // pad odd-length

  const len = hex.length >> 1, u8 = new Uint8Array(len)
  // ~55% faster than parseInt
  for let i=0,j=0; i<len; j+=2 ::
    u8[i++] = (_lut_hexu8[hex[j]] << 4) | _lut_hexu8[hex[j+1]]
  return u8

